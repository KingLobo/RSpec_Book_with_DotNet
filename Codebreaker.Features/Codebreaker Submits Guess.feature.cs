// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Codebreaker.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Code-breaker Submits Guess")]
    public partial class Code_BreakerSubmitsGuessFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Codebreaker Submits Guess.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Code-breaker Submits Guess", @"
The code-breaker submits a guess of four numbers. The game marks the
guess with + and - signs.

For each number in the guess that matches the number and position of a 
in the secret code, the mark includes one + sign. For each number in the
guess that matches the number but not the position of a number in the
secret code, the mark includes one - sign.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Submit a guess")]
        [NUnit.Framework.CategoryAttribute("codeBreaker")]
        [NUnit.Framework.TestCaseAttribute("1234", "5555", "", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "1555", "+", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "2555", "-", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "5254", "++", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "5154", "+-", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "2545", "--", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "5234", "+++", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "5134", "++-", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "5124", "+--", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "5123", "---", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "1234", "++++", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "1243", "++--", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "1423", "+---", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "4321", "----", null)]
        public virtual void SubmitAGuess(string code, string guess, string mark, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "codeBreaker"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit a guess", @__tags);
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given(string.Format("the secret code is \"{0}\"", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When(string.Format("I guess \"{0}\"", guess), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then(string.Format("the mark should be \"{0}\"", mark), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
